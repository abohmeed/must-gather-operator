apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .ObjectMeta.Name }}
  namespace: {{ .ObjectMeta.Namespace }}
spec:
  template:
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/infra
                operator: Exists
            weight: 1
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/infra
          operator: Exists
      backoffLimit: 6
      restartPolicy: OnFailure     
      shareProcessNamespace: true
      containers:        
{{- $timeout := .Spec.MustGatherTimeout}}
{{ range $index, $element := .Spec.MustGatherImages }} 
      - command:
        - /bin/bash
        - -c 
        - |
          timeout {{ $timeout }} bash -x -c -- '/usr/bin/gather'
          status=$?
          if [[ $status -eq 124 || $status -eq 137 ]]; then
            echo "Gather timed out."
            exit 0
          fi
        image: {{ $element }}
        name: gather-{{ $index }}
        volumeMounts:
        - mountPath: /must-gather
          name: must-gather-output
{{- end }}
      - command:
        - /bin/bash
        - -c
        - |
          count=0
          until [ $count -gt 4 ]
          do
            while `pgrep -a gather > /dev/null`
            do
              echo "waiting for gathers to complete ..." 
              sleep 120
              count=0
            done
            echo "no gather is running ($count / 4)"
            ((count++))
            sleep 30
          done
          /usr/local/bin/upload
        image: THIS_STRING_WILL_BE_REPLACED_BUT_DONT_CHANGE_IT
        name: upload
        volumeMounts:
        - mountPath: /must-gather
          name: must-gather-output
        - mountPath: /must-gather-upload
          name: must-gather-upload
        {{- if .Spec.PrivateSsl }}          
        - mountPath: /ssl
          name: aws-certs
        {{- end }}
        {{- if eq .Spec.Clean true }}
        - mountPath: /must-gather-output-cleaned
          name: must-gather-output-cleaned
        - mountPath: /must-gather-clean-config
          name: config-volume
        {{- end }}
        env:
        {{ if .Spec.ProxyConfig.HTTPProxy -}}
        - name: http_proxy
          value: {{ .Spec.ProxyConfig.HTTPProxy }}
        {{ end -}}
        {{ if .Spec.ProxyConfig.HTTPSProxy -}}
        - name: https_proxy
          value: {{ .Spec.ProxyConfig.HTTPSProxy }}
        {{ end -}}
        {{ if .Spec.ProxyConfig.NoProxy -}}
        - name: no_proxy
          value: {{ .Spec.ProxyConfig.NoProxy }}
        {{ end -}}
        - name: username
          valueFrom:
            secretKeyRef:
              name: {{ .Spec.CaseManagementAccountSecretRef.Name }}
              key: username
        - name: password
          valueFrom:
            secretKeyRef:
              name: {{ .Spec.CaseManagementAccountSecretRef.Name }}
              key: password
        - name: caseid
          value: "{{ .Spec.CaseID }}"
        - name: must_gather_output
          value: /must-gather
        - name: must_gather_upload
          value: /must-gather-upload
        - name: internal_user
          value: "{{ .Spec.InternalUser }}"
{{- if .Spec.Target }}
        - name: TARGET
          value: {{ .Spec.Target }}
  {{- if eq .Spec.Target "s3" }}
        - name: AWS_BUCKET
          value: {{ .Spec.AwsBucket }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Spec.CaseManagementAccountSecretRef.Name }}
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Spec.CaseManagementAccountSecretRef.Name }}
              key: aws_secret_access_key
        - name: AWS_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Spec.CaseManagementAccountSecretRef.Name }}
              key: aws_endpoint_url
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: {{ .Spec.CaseManagementAccountSecretRef.Name }}
              key: aws_region
        {{- if .Spec.PrivateSsl }}
        - name: AWS_CA_BUNDLE
          value: /ssl/private-aws-certificate.crt
        {{- end }}
  {{- end }}
{{- end }}
        - name: clean
          value: "{{ .Spec.Clean }}"
      serviceAccountName: {{ .Spec.ServiceAccountRef.Name }}
      volumes:
      - emptyDir: {}
        name: must-gather-output
      - emptyDir: {}
        name: must-gather-upload
      {{- if .Spec.PrivateSsl }}
      - name: aws-certs
        secret:
          secretName: {{ .Spec.CaseManagementAccountSecretRef.Name }}
          items:
          - key: ssl_cert
            path: private-aws-certificate.crt
      {{- end }}
      {{- if eq .Spec.Clean true }}
      - emptyDir: {}
        name: must-gather-output-cleaned
      - name: config-volume
        configMap:
          name: {{ .Spec.MustGatherCleanConfigMapRef.Name }}
      {{- end }}